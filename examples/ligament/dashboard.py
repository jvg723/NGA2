# -*- coding: utf-8 -*-

# Run this app with `python app.py` and
# visit http://127.0.0.1:8050/ in your web browser.

import dash
import dash_daq as daq
from dash import dcc
from dash import html
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import math
import re
import os
pd.options.plotting.backend = "plotly"

# Process here the input file to obtain simulation parameters
with open('input') as fobj:
    for line in fobj:
        line_data = re.split(':',line)
        if line_data[0].rstrip()=='Reynolds number':
            Reynolds=float(line_data[1])
        if line_data[0].rstrip()=='Weber number':
            Weber=float(line_data[1])
        if line_data[0].rstrip()=='Viscosity ratio':
            visc_r=float(line_data[1])
        if line_data[0].rstrip()=='Density ratio':
            rho_r=float(line_data[1])
        if line_data[0].rstrip()=='Target Re_lambda':
            Re_lambda=float(line_data[1])
        if line_data[0].rstrip()=='Turbulence intensity':
            TI=float(line_data[1])

# Gas density
rho_g=1
# Compute gas viscosity
visc_g=1/Reynolds
# Liquid density
rho_l=rho_r
# Liquid viscosity
visc_l=visc_g*visc_r

# PDF of generated drops
# df = pd.read_csv('monitor/dropinfo', delim_whitespace=True, header=None, skiprows=2, usecols=[1, 4, 5], names=['Time', 'Vtot', 'Vimb'])
# df['Iper'] = 100*df['Vimb']/df['Vtot']
# df['Tper'] = 100*df['Vtot']/df['Vtot']
# df['NTime'] = df['Time']/Tref

fig1=go.Figure()
# fig1.add_trace(go.Scatter(x=df['NTime'], y=df['Iper'], fill='tozeroy', mode='none', showlegend=False)) # fill down to xaxis
# fig1.add_trace(go.Scatter(x=df['NTime'], y=df['Tper'], fill='tonexty', mode='none', showlegend=False)) # fill to trace0 y
fig1.update_layout(width=800,height=600)
#fig1.update_layout(title_text='Imbibition over time',title_font_size=36,title_x=0.5)
fig1.update_xaxes(title_text='Normalized time',title_font_size=24,tickfont_size=24)
fig1.update_yaxes(title_text='Percent imbibed',title_font_size=24,tickfont_size=24,range=[0,100])
# fig1.add_annotation(x=1, y=90,text='Non-imbibed',showarrow=False, font_size=24, font_color='darkslategrey')
# fig1.add_annotation(x=4, y=10,text='Imbibed'    ,showarrow=False, font_size=24, font_color='darkslategrey')

# This is where we define the dashboard layout
app = dash.Dash(__name__)
app.layout = html.Div(style={"margin-left": "15px"},children=[

    # Title of doc
    dcc.Markdown('''# Break-up of a liquid ligament'''),
    dcc.Markdown('''*NGA2 Dashboard written by J. Giliberto, last updated 06/21/2023*'''),
    
    # Intro
    dcc.Markdown('''
    ## Overview

    In this dashboard, we post-process the raw data generated by NGA2's ligament
    case. This simulation is based on the experimental work of Nasser Ashgriz to study the break-up behavior of an isolated liquid 
    ligament in a turbulent cross flow.
    '''),
    
    # Parameters
    dcc.Markdown(f'''
    ---
    ## Simulation parameters

    By analyzing the input file, we have detected the following parameters:
    - Reynolds number: $\mathrm{{Re}}$ = {Reynolds}
    - Weber number: $\mathrm{{We}}$ = {Weber}
    - Viscosity ratio: $\mu_l / \mu_g$ = {visc_r}
    - Density ratio: $\\rho_l / \\rho_g$ = {rho_r}
    - Taylor-scale Reynolds number: $\mathrm{{R}}_{{\lambda}}$ = {Re_lambda}
    - Turbulence intensity: $\mathrm{{TI}}$ = {TI}

    ''',mathjax=True),
    
    # Imbibed volume over time
    dcc.Markdown(f'''
    ---
    ## Droplet size distribution
    
    The graph below shows the fraction of the droplet volume imbibed in the
    perforated plate over time. Time has been normalized by the Rayleigh timescale.
    '''),
    dcc.Graph(id='Volume_imbibed',figure=fig1),
    
    
])

@app.callback(
    dash.dependencies.Output('Radius-slider','figure'),
    [dash.dependencies.Input('time-slider','value')])
def update_figure(value):
    myind=value
    myrf=rf0.copy()
    myrf['y']=rf['y']/Rinit
    myrf['R']=rf[ftime[myind]]/Rinit
    myrf=myrf[myrf['y']>=0]
    myrf=myrf[myrf['R']>0]

    fig2=go.Figure()
    fig2.add_trace(go.Scatter(x=myrf['R'], y=myrf['y'], showlegend=False, mode='lines+markers', line_color='red', line_shape='spline'))
    fig2.update_layout(width=700,height=800)
    fig2.update_xaxes(title_text='Normalized distance from centerline axis of drop',title_font_size=24,tickfont_size=24,range=[0,2.5])
    fig2.update_yaxes(title_text='Normalized height above plate',title_font_size=24,tickfont_size=24,range=[0,3])
    fig2.add_annotation(x=1.5, y=2.75,text='Normalized time={:.3f}'.format(rtime[myind]/Tref),showarrow=False, font_size=24, font_color='darkslategrey')

    return fig2


if __name__ == '__main__':
    app.run_server(debug=True)
